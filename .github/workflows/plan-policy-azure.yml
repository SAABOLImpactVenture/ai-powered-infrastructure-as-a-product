name: plan-policy-azure
on:
  pull_request:
    paths: ['products/azure/**', 'policies/**']
permissions:
  id-token: write
  contents: read
  security-events: write   # for SARIF upload

env:
  # Backend (Mgmt subscription)
  RG_PLATFORM: rg-aiap-platform
  STATE_STORAGE_ACCOUNT: ${{ secrets.STATE_STORAGE_ACCOUNT }}
  STATE_CONTAINER: ${{ secrets.STATE_CONTAINER }}
  EVIDENCE_CONTAINER: ${{ secrets.EVIDENCE_CONTAINER }}

  # Terraform
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"
  TF_CLI_ARGS: "-no-color"
  TF_WORKDIR: products/azure/example  # <— change if your TF lives elsewhere

jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Terraform
        id: detect
        run: |
          if compgen -G "${{ env.TF_WORKDIR }}/*.tf" > /dev/null; then
            echo "has_tf=true" >> $GITHUB_OUTPUT
          else
            echo "No Terraform files in ${{ env.TF_WORKDIR }} — skipping."
            echo "has_tf=false" >> $GITHUB_OUTPUT
          fi

      - name: Azure login (Mgmt for backend)
        if: steps.detect.outputs.has_tf == 'true'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.DEV_SUB_ID }}
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform Init/Plan (JSON)
        env:
          ARM_USE_AZUREAD: true
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.DEV_SUB_ID }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.RG_PLATFORM }}" \
            -backend-config="storage_account_name=${{ env.STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ env.STATE_CONTAINER }}" \
            -backend-config="key=${{ github.repository }}-${{ github.ref_name }}.tfstate" \
            -backend-config="use_azuread_auth=true"

      - name: Switch context to DEV subscription
        if: steps.detect.outputs.has_tf == 'true'
        run: az account set --subscription "${{ secrets.DEV_SUB_ID }}"

      # ---------- Security Gates (fail-closed) ----------

      - name: Setup TFLint
        if: steps.detect.outputs.has_tf == 'true'
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: TFLint init
        if: steps.detect.outputs.has_tf == 'true'
        working-directory: ${{ env.TF_WORKDIR }}
        run: tflint --init

      - name: TFLint (SARIF)
        if: steps.detect.outputs.has_tf == 'true'
        working-directory: ${{ env.TF_WORKDIR }}
        run: |
          tflint -f sarif > tflint.sarif
          test -s tflint.sarif || echo '{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[]}' > tflint.sarif

      - name: Upload SARIF (TFLint)
        if: steps.detect.outputs.has_tf == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.TF_WORKDIR }}/tflint.sarif
          category: tflint

      - name: Install tfsec
        if: steps.detect.outputs.has_tf == 'true'
        run: |
          curl -sSL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

      - name: tfsec (SARIF)
        if: steps.detect.outputs.has_tf == 'true'
        working-directory: ${{ env.TF_WORKDIR }}
        run: |
          tfsec --format sarif --out tfsec.sarif || true
          test -s tfsec.sarif || echo '{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[]}' > tfsec.sarif

      - name: Upload SARIF (tfsec)
        if: steps.detect.outputs.has_tf == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.TF_WORKDIR }}/tfsec.sarif
          category: tfsec

      - name: Install Conftest (OPA)
        if: steps.detect.outputs.has_tf == 'true' && hashFiles('policy/**/*.rego') != ''
        run: |
          ver="0.53.0"
          curl -LO "https://github.com/open-policy-agent/conftest/releases/download/v${ver}/conftest_${ver}_Linux_x86_64.tar.gz"
          tar -xzf conftest_${ver}_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin/conftest
          conftest --version

      - name: Conftest policy check
        if: steps.detect.outputs.has_tf == 'true' && hashFiles('policy/**/*.rego') != ''
        working-directory: ${{ env.TF_WORKDIR }}
        run: |
          terraform show -json > plan.json || true
          conftest test plan.json -p ../../policy

      # ---------- Terraform validate/plan ----------

      - name: Terraform validate
        if: steps.detect.outputs.has_tf == 'true'
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform validate

      - name: Terraform plan
        if: steps.detect.outputs.has_tf == 'true'
        id: plan
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform plan -out=tfplan.bin

  policy:
    runs-on: ubuntu-latest
    needs: plan
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: { name: tf-plan }
      - name: tfsec
        run: tfsec --format sarif --out tfsec.sarif .
      - name: checkov (plan.json)
        run: checkov -o sarif -f plan.json > checkov.sarif
      - name: conftest
        run: conftest test --policy policies/ plan.json
      - name: Upload SARIF (merged)
        run: jq -s '{version:"2.1.0", runs:(.[0].runs + .[1].runs)}' tfsec.sarif checkov.sarif > merged.sarif
      - uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: merged.sarif }
