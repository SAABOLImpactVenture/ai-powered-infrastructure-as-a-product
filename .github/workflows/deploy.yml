name: deploy
on:
  workflow_dispatch:
    inputs:
      path:        { description: Terraform module path, required: true }
      environment: { description: Environment to deploy, required: true, default: prod }
permissions:
  contents: read
  id-token: write
concurrency: deploy-${{ github.ref }}

jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.8.6 }
      - name: terraform init
        working-directory: ${{ inputs.path }}
        run: terraform init -input=false
      - name: terraform plan
        working-directory: ${{ inputs.path }}
        run: terraform plan -out=tfplan.bin -input=false -lock=false -detailed-exitcode || exit_code=$?; echo "exit_code=${exit_code:-0}" >> $GITHUB_OUTPUT
      - uses: actions/upload-artifact@v4
        with: { name: tfplan, path: ${{ inputs.path }}/tfplan.bin }

  policy:
    runs-on: ubuntu-latest
    needs: plan
    steps:
      - uses: actions/checkout@v4
      - name: Conftest (OPA) — block on denies
        run: conftest test --policy policy/ .
      - name: Checkov (TF/K8s/Helm) — fail on HIGH
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          soft_fail: false
          framework: terraform,kubernetes,helm

  sbom:
    runs-on: ubuntu-latest
    needs: plan
    strategy:
      fail-fast: false
      matrix:
        image:
          - mcp-azure
          - mcp-policy-azure
          - mcp-aws
          - mcp-policy-aws
          - mcp-gcp
          - mcp-policy-gcp
          - mcp-oci
          - mcp-policy-oci
    steps:
      - uses: actions/checkout@v4
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.17.5
      - name: Generate SBOM (SPDX)
        run: syft "ghcr.io/${{ github.repository }}:${{ matrix.image }}-latest" -o spdx-json > "sbom-${{ matrix.image }}.spdx.json"
      - uses: actions/upload-artifact@v4
        with: { name: sbom-${{ matrix.image }}, path: sbom-${{ matrix.image }}.spdx.json }

  cosign-verify:
    runs-on: ubuntu-latest
    needs: sbom
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0
        with: { cosign-release: 'v2.2.4' }
      - name: Verify images (keyless via GitHub OIDC)
        env: { COSIGN_EXPERIMENTAL: "1" }
        run: |
          set -e
          for img in mcp-azure mcp-policy-azure mcp-aws mcp-policy-aws mcp-gcp mcp-policy-gcp mcp-oci mcp-policy-oci; do
            cosign verify               --certificate-oidc-issuer="https://token.actions.githubusercontent.com"               --certificate-identity-regexp="^https://github.com/${{ github.repository }}/.+"               "ghcr.io/${{ github.repository }}:${img}-latest"
          done

  apply:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [plan, policy, cosign-verify]
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.8.6 }
      - uses: actions/download-artifact@v4
        with: { name: tfplan, path: ${{ inputs.path }} }
      - name: terraform init
        working-directory: ${{ inputs.path }}
        run: terraform init -input=false
      - name: terraform apply (from plan)
        working-directory: ${{ inputs.path }}
        run: terraform apply -input=false -lock-timeout=10m tfplan.bin
