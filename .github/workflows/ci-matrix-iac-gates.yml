name: validate / iac-gates

on:
  pull_request:
    branches: [ "**" ]
    paths:
      - "products/**"
      - "modules/**"
      - "policy/**"
      - ".github/workflows/ci-matrix-iac-gates.yml"

permissions:
  contents: read
  security-events: write

env:
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"
  TF_CLI_ARGS: "-no-color"

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      any_tf: ${{ steps.scan.outputs.any_tf }}
      dirs:   ${{ steps.scan.outputs.dirs }}
    steps:
      - uses: actions/checkout@v4
      - name: Determine changed TF directories
        id: scan
        shell: bash
        run: |
          set -e
          BASE="${{ github.base_ref || 'main' }}"
          git fetch --depth=50 origin || true
          CHANGED="$(git diff --name-only origin/${BASE}... | tr -d '\r')"
          declare -A SEEN
          DIRS=()
          while IFS= read -r f; do
            d="${f%/*}"
            [ -d "$d" ] || continue
            if ls "$d"/*.tf >/dev/null 2>&1; then
              if [ -z "${SEEN[$d]+x}" ]; then SEEN[$d]=1; DIRS+=("$d"); fi
            fi
          done <<< "$CHANGED"
          if [ "${#DIRS[@]}" -gt 0 ]; then echo "any_tf=true"  >> $GITHUB_OUTPUT; else echo "any_tf=false" >> $GITHUBOUTPUT; fi 2>/dev/null || true
          printf '%s\n' "${DIRS[@]}" | jq -R -s -c 'split("\n")[:-1]' > dirs.json
          echo "dirs=$(cat dirs.json)" >> $GITHUB_OUTPUT
          echo "Detected TF dirs:"; cat dirs.json

  tflint:
    name: tflint
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.any_tf == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: terraform-linters/setup-tflint@v4
      - name: Run TFLint on changed dirs
        shell: bash
        run: |
          set -e
          for dir in $(jq -r '.[]' <<< '${{ needs.detect.outputs.dirs }}'); do
            echo "== TFLint: $dir =="
            (cd "$dir" && tflint --init && tflint)
          done

  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.any_tf == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Install tfsec
        run: curl -sSL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
      - name: Run tfsec on changed dirs
        shell: bash
        run: |
          set -e
          for dir in $(jq -r '.[]' <<< '${{ needs.detect.outputs.dirs }}'); do
            echo "== tfsec: $dir =="
            (cd "$dir" && tfsec || true)
          done

  conftest:
    name: conftest
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.any_tf == 'true' && hashFiles('policy/**/*.rego') != ''
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Install Conftest
        run: |
          ver="0.53.0"
          curl -LO "https://github.com/open-policy-agent/conftest/releases/download/v${ver}/conftest_${ver}_Linux_x86_64.tar.gz"
          tar -xzf conftest_${ver}_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin/conftest
      - name: Plan each changed dir and test with Conftest
        shell: bash
        env:
          ARM_USE_OIDC: "true"
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.DEV_SUB_ID }}
        run: |
          set -e
          for dir in $(jq -r '.[]' <<< '${{ needs.detect.outputs.dirs }}'); do
            echo "== Conftest: $dir =="
            ( cd "$dir" && terraform init -backend=false && terraform plan -out=tfplan.bin && terraform show -json tfplan.bin > plan.json )
            conftest test "$dir/plan.json" -p policy
          done
