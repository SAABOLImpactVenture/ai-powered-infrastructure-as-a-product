name: ci: offline

on:
  pull_request:
    branches: [ "**" ]
    paths:
      - "**/*.py"
      - "requirements*.txt"
      - "pyproject.toml"
      - ".flake8"
      - "setup.cfg"
      - "tox.ini"
      - ".github/workflows/ci-offline.yml"

permissions:
  contents: read

jobs:
  python-ci:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]  # extend if you want more versions
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix['python-version'] }}
          cache: pip

      - name: Detect Python project layout
        id: detect
        shell: bash
        run: |
          # pick first available requirements file (if any)
          req=''
          for f in requirements-dev.txt requirements.txt; do
            [ -f "$f" ] && req="$f" && break
          done
          echo "req=$req" >> "$GITHUB_OUTPUT"

          # tests present?
          if git ls-files 'tests/**/*.py' | grep -q . ; then
            echo "has_tests=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_tests=false" >> "$GITHUB_OUTPUT"
          fi

          # flake8 configured?
          if [ -f .flake8 ] || [ -f setup.cfg ] || [ -f tox.ini ]; then
            echo "has_flake8=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_flake8=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install dependencies (requirements file)
        if: steps.detect.outputs.req != ''
        run: pip install -r "${{ steps.detect.outputs.req }}"

      - name: Install minimal tooling (no requirements file)
        if: steps.detect.outputs.req == ''
        run: |
          pip install --upgrade pip
          pip install pytest flake8 || true

      - name: Run tests (pytest) if tests directory exists
        if: steps.detect.outputs.has_tests == 'true'
        run: pytest -q

      - name: Lint (flake8) only if configured
        if: steps.detect.outputs.has_flake8 == 'true'
        run: flake8
